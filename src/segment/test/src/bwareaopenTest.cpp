/*
 * test.cpp
 *
 *  Created on: Jun 28, 2011
 *      Author: tcpan
 */
#include "opencv2/opencv.hpp"
#include <iostream>
#include <dirent.h>
#include <vector>
#include <string>
#include <errno.h>
#include <time.h>
#include "MorphologicOperations.h"
#include "utils.h"
#include <stdio.h>
#include "PixelOperations.h"

using namespace cv;


int main (int argc, char **argv){

	uint64_t t1, t2;



	//Mat imfilldata = imread("test/text.png", 0) > 0;
	//maskb = repeat(imfilldata, 16, 16);
	if (argc < 2) {
		printf("Need an image as input\n");
		return -1;
	}
	Mat mask = imread(argv[1], 0);
	if (! mask.data) {
		printf("CAN't READ FILE: %s \n", argv[1]);
		return -1;
	}
	Mat maskb = mask > 0;

	// bwareaopen testing
	t1 = cciutils::ClockGetTime();
	Mat bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 100, 500, 8);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen mid took " << t2-t1 << "ms" << std::endl;
	imwrite("test/out-bwareaopen-mid.pbm", bwareaopen);
	t1 = cciutils::ClockGetTime();
	bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 1, 100, 8);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen small took " << t2-t1 << "ms" << std::endl;
	imwrite("test/out-bwareaopen-small.pbm", bwareaopen);
	t1 = cciutils::ClockGetTime();
	bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 500, std::numeric_limits<int>::max(), 8);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen large took " << t2-t1 << "ms" << std::endl;
	imwrite("test/out-bwareaopen-large.pbm", bwareaopen);

	// bwareaopen testing
	t1 = cciutils::ClockGetTime();
	bwareaopen = nscale::bwareaopen2<unsigned char>(maskb, 100, 500, 8);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen2 mid took " << t2-t1 << "ms" << std::endl;
	imwrite("test/out-bwareaopen2-mid.pbm", bwareaopen);
	t1 = cciutils::ClockGetTime();
	bwareaopen = nscale::bwareaopen2<unsigned char>(maskb, 1, 100, 8);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen2 small took " << t2-t1 << "ms" << std::endl;
	imwrite("test/out-bwareaopen2-small.pbm", bwareaopen);
	t1 = cciutils::ClockGetTime();
	bwareaopen = nscale::bwareaopen2<unsigned char>(maskb, 500, std::numeric_limits<int>::max(), 8);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen2 large took " << t2-t1 << "ms" << std::endl;
	imwrite("test/out-bwareaopen2-large.pbm", bwareaopen);


	t1 = cciutils::ClockGetTime();
	bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 100, 500, 4);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen4 mid took " << t2-t1 << "ms" << std::endl;
	imwrite("test/out-bwareaopen4-mid.pbm", bwareaopen);
	t1 = cciutils::ClockGetTime();
	bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 1, 100, 4);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen4 small took " << t2-t1 << "ms" << std::endl;
	imwrite("test/out-bwareaopen4-small.pbm", bwareaopen);
	t1 = cciutils::ClockGetTime();
	bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 500, std::numeric_limits<int>::max(), 4);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen4 large took " << t2-t1 << "ms" << std::endl;
	imwrite("test/out-bwareaopen4-large.pbm", bwareaopen);


	// bwlabel testing
	t1 = cciutils::ClockGetTime();
	Mat bwlabeled = nscale::bwlabel2(maskb, 8);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwlabel2 took " << t2-t1 << "ms" << std::endl;
	// write the raw image
	imwrite("test/out-bwlabel2.pbm", ::nscale::PixelOperations::mod<int>(bwlabeled, 64) * 4);
	imwrite("test/out-bwlabel2-bw.pbm", bwlabeled > 0);


	t1 = cciutils::ClockGetTime();
	bwlabeled = nscale::bwlabel(maskb, false, 8);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwlabel took " << t2-t1 << "ms" << std::endl;
	// write the raw image
	imwrite("test/out-bwlabel.pbm", ::nscale::PixelOperations::mod<int>(bwlabeled, 64) * 4);
	imwrite("test/out-bwlabel-bw.pbm", bwlabeled > 0);




	//waitKey();

	return 0;
}

