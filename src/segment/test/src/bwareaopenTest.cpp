/*
 * test.cpp
 *
 *  Created on: Jun 28, 2011
 *      Author: tcpan
 */
#include "opencv2/opencv.hpp"
#include <iostream>
#include <dirent.h>
#include <vector>
#include <string>
#include <errno.h>
#include <time.h>
#include "MorphologicOperations.h"
#include "utils.h"
#include <stdio.h>
#include "PixelOperations.h"
#include "UtilsCVImageIO.h"

using namespace cv;


int main (int argc, char **argv){

	uint64_t t1, t2;
	std::vector<int> stages;
	for (int stage = 0; stage <= 200; ++stage) {
		stages.push_back(stage);
	}

    std::string prefix;
    prefix.assign("test/out-bwareaopen-test-");
    std::string suffix;
    suffix.assign(".pbm");
    ::cciutils::cv::IntermediateResultHandler *iwrite = new ::cciutils::cv::IntermediateResultWriter(prefix, suffix, stages);


	std::vector<std::string> segfiles;
	segfiles.push_back(std::string("/home/tcpan/PhD/path/Data/seg-validate-cpu/astroII.1/astroII.1.ndpi-0000008192-0000008192-7.mask.pbm"));
	segfiles.push_back(std::string("/home/tcpan/PhD/path/Data/seg-validate-cpu/gbm2.1/gbm2.1.ndpi-0000004096-0000004096-7.mask.pbm"));
	segfiles.push_back(std::string("/home/tcpan/PhD/path/Data/seg-validate-cpu/normal.3/normal.3.ndpi-0000028672-0000012288-7.mask.pbm"));
	segfiles.push_back(std::string("/home/tcpan/PhD/path/Data/seg-validate-cpu/oligoastroIII.1/oligoastroIII.1.ndpi-0000053248-0000008192-7.mask.pbm"));
	segfiles.push_back(std::string("/home/tcpan/PhD/path/Data/seg-validate-cpu/oligoIII.1/oligoIII.1.ndpi-0000012288-0000028672-7.mask.pbm"));

	for (int i = 0; i < segfiles.size(); ++i ) {

	//Mat imfilldata = imread("test/text.png", 0) > 0;
	//maskb = repeat(imfilldata, 16, 16);
	printf("file: %s\n", segfiles[i].c_str());
	Mat mask = imread(segfiles[i].c_str(), 0);
	if (! mask.data) {
		printf("CAN't READ FILE: %s \n", segfiles[i].c_str());
		return -1;
	}
	Mat maskb = mask > 0;
	printf("type: %d\n", maskb.type());
int count = 0;
	// bwareaopen testing
	t1 = cciutils::ClockGetTime();
	Mat bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 100, 500, 8, count);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen mid took " << t2-t1 << "ms" << std::endl;
	iwrite->saveIntermediate(bwareaopen, 1);
//	imwrite("test/out-bwareaopen-mid.pbm", bwareaopen);
	t1 = cciutils::ClockGetTime();
	bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 1, 100, 8, count);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen small took " << t2-t1 << "ms" << std::endl;
	iwrite->saveIntermediate(bwareaopen, 2);
//	imwrite("test/out-bwareaopen-small.pbm", bwareaopen);
	t1 = cciutils::ClockGetTime();
	bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 500, std::numeric_limits<int>::max(), 8, count);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen large took " << t2-t1 << "ms" << std::endl;
	iwrite->saveIntermediate(bwareaopen, 3);
//	imwrite("test/out-bwareaopen-large.pbm", bwareaopen);

	// bwareaopen testing
	t1 = cciutils::ClockGetTime();
	Mat bwareaopen2 = nscale::bwareaopen2(maskb, 100, 500, 8, count);
	printf("output type: %d\n", bwareaopen2.type());
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen2 mid took " << t2-t1 << "ms" << std::endl;
	iwrite->saveIntermediate(bwareaopen2, 11);

	//imwrite("test/out-bwareaopen2-mid.pbm", bwareaopen);
	t1 = cciutils::ClockGetTime();
	bwareaopen2 = nscale::bwareaopen2(maskb, 1, 100, 8, count);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen2 small took " << t2-t1 << "ms" << std::endl;
	iwrite->saveIntermediate(bwareaopen2, 12);

	//	imwrite("test/out-bwareaopen2-small.pbm", bwareaopen);
	t1 = cciutils::ClockGetTime();
	bwareaopen2 = nscale::bwareaopen2(maskb, 500, std::numeric_limits<int>::max(), 8, count);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen2 large took " << t2-t1 << "ms" << std::endl;
	iwrite->saveIntermediate(bwareaopen2, 13);

	t1 = cciutils::ClockGetTime();
	bwareaopen2 = nscale::bwareaopen2(maskb, 11, 1000, 8, count);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwareaopen2 11-1000 took " << t2-t1 << "ms" << std::endl;
	iwrite->saveIntermediate(bwareaopen2, 14);

//	imwrite("test/out-bwareaopen2-large.pbm", bwareaopen);

	// bwlabel testing
	t1 = cciutils::ClockGetTime();
	Mat bwlabeled = nscale::bwlabel2(maskb, 8, true);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwlabel2 took " << t2-t1 << "ms" << std::endl;
	// write the raw image
	iwrite->saveIntermediate(bwlabeled, 111);
	iwrite->saveIntermediate(bwlabeled > 0, 112);

//	imwrite("test/out-bwlabel2.pbm", ::nscale::PixelOperations::mod<int>(bwlabeled, 64) * 4);
//	imwrite("test/out-bwlabel2-bw.pbm", bwlabeled > 0);


	t1 = cciutils::ClockGetTime();
	Mat bwlabeled2 = nscale::bwlabel(maskb, false, 8);
	t2 = cciutils::ClockGetTime();
	std::cout << "bwlabel took " << t2-t1 << "ms" << std::endl;
	// write the raw image
	iwrite->saveIntermediate(bwlabeled2, 101);
	iwrite->saveIntermediate(bwlabeled2 > 0, 102);
//	imwrite("test/out-bwlabel.pbm", ::nscale::PixelOperations::mod<int>(bwlabeled, 64) * 4);
//	imwrite("test/out-bwlabel-bw.pbm", bwlabeled > 0);




#if defined (HAVE_CUDA)
	// gpu version of watershed
	Stream stream;
	GpuMat g_maskb;
	stream.enqueueUpload(maskb, g_maskb);
	stream.waitForCompletion();
	std::cout << "finished uploading" << std::endl;


	t1 = cciutils::ClockGetTime();
	GpuMat g_bwareaopen = nscale::gpu::bwareaopen(g_maskb, 100, 500, 8, count, stream);
	t2 = cciutils::ClockGetTime();
	std::cout << "gpu bwareaopen mid took " << t2-t1 << "ms" << std::endl;
	iwrite->saveIntermediate(g_bwareaopen, 51);
//	imwrite("test/out-bwareaopen-gpu-mid.pbm", bwareaopen);

	t1 = cciutils::ClockGetTime();
	g_bwareaopen = nscale::gpu::bwareaopen(g_maskb, 1, 100, 8, count, stream);
	t2 = cciutils::ClockGetTime();
	std::cout << "gpu bwareaopen small took " << t2-t1 << "ms" << std::endl;
	iwrite->saveIntermediate(g_bwareaopen, 52);
//	imwrite("test/out-bwareaopen-gpu-small.pbm", bwareaopen);

	t1 = cciutils::ClockGetTime();
	g_bwareaopen = nscale::gpu::bwareaopen(g_maskb, 500, std::numeric_limits<int>::max(), 8, count, stream);
	t2 = cciutils::ClockGetTime();
	std::cout << "gpu bwareaopen large took " << t2-t1 << "ms" << std::endl;
	iwrite->saveIntermediate(g_bwareaopen, 53);

//	imwrite("test/out-bwareaopen-gpu-large.pbm", bwareaopen);



	t1 = cciutils::ClockGetTime();
	GpuMat g_bwlabeled = nscale::gpu::bwlabel(g_maskb, 8, true, stream);
	t2 = cciutils::ClockGetTime();
	std::cout << "gpu bwlabel took " << t2-t1 << "ms" << std::endl;
	// write the raw image
	iwrite->saveIntermediate(g_bwlabeled, 151);
	GpuMat thresh = ::nscale::gpu::PixelOperations::threshold(g_bwlabeled, 0, false, std::numeric_limits<int>::max(), true, stream);
	iwrite->saveIntermediate(thresh, 152);
//	imwrite("test/out-bwlabel-gpu.pbm", ::nscale::PixelOperations::mod<int>(bwlabeled, 64) * 4);
//	imwrite("test/out-bwlabel-gpu-bw.pbm", bwlabeled > 0);




#endif
	}
delete iwrite;

	//waitKey();

	return 0;
}

